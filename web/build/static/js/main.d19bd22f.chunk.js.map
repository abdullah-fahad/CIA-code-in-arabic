{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onSubmit","bind","state","content","tranzilation","error","e","preventDefault","this","setState","axios","post","then","res","data","message","console","log","catch","err","className","value","onChange","target","placeholder","onClick","React","Component","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAKMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BAEjB,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,MAAQ,CACXC,QAAS,GACTC,aAAc,GACdC,MAAO,IAPQ,E,qDAUVC,GAAG,IAAD,OACTA,EAAEC,iBACwB,KAAvBC,KAAKN,MAAMC,QACbK,KAAKC,SAAS,CAACJ,MAAO,mJAEtBK,IAAMC,KAAK,QAAQ,CAAC,KAAO,GAAP,OAAWH,KAAKN,MAAMC,WAC1CS,MAAK,SAAAC,GACJ,EAAKJ,SAAS,CAACL,aAAcS,EAAIC,KAAKC,UACtCC,QAAQC,SACPC,OAAM,SAAAC,GACP,EAAKV,SAAS,CAACJ,MAAO,8CAAac,S,+BAK7B,IAAD,OACP,OACE,6BACE,yBAAKC,UAAU,UACb,uBAAGA,UAAU,KAAb,+HAEF,6BACA,yBAAKA,UAAU,OACnB,6BAAyB,KAAnBZ,KAAKN,MAAMG,MAAW,iCAAW,wBAAIe,UAAU,MAAMZ,KAAKN,MAAMG,QAClE,8BAAUgB,MAAOb,KAAKN,MAAMC,QAASmB,SAAU,SAAChB,GAAK,EAAKG,SAAS,CAACN,QAASG,EAAEiB,OAAOF,MAAOhB,MAAM,MAAOe,UAAU,WAAWI,YAAY,oHAAmC,6BAC7K,4BAAQC,QAASjB,KAAKR,SAAUoB,UAAU,WAA1C,kCACA,4BAAQK,QAAS,WAAK,EAAKhB,SAAS,CAACN,QAAS,GAAGE,MAAO,GAAGD,aAAc,MAAQgB,UAAU,UAA3F,sBAAgH,6BACjH,8BAAUC,MAAOb,KAAKN,MAAME,aAAegB,UAAU,yB,GAtC3CM,IAAMC,WA4CT7B,IACf8B,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCtCpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASC,eAAe,SDyHpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAb,GACLW,QAAQX,MAAMA,EAAMU,c","file":"static/js/main.d19bd22f.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props) {\n    \n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      content: '',\n      tranzilation: '',\n      error: ''\n    }\n  }\n  onSubmit(e){\n    e.preventDefault();\n    if(this.state.content === '')\n    {this.setState({error: \"لايمكن ترجمة كود مصدري فارغ\"})}\n    else\n    {axios.post('/tran',{\"code\": `${this.state.content}`})\n    .then(res =>{\n      this.setState({tranzilation: res.data.message})\n      console.log();\n    }).catch(err => {\n      this.setState({error: \"هناك خطأ\" + err})\n    });\n  }}\n    \n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <p className=\"p\">CIA | تطبيق البرمجة بالعربي</p>\n        </div>\n        <br />\n        <div className=\"div\">\n    <div>{this.state.error===''?<h3> </h3>:<h3 className=\"h3\">{this.state.error}</h3>}</div>\n        <textarea value={this.state.content} onChange={(e)=>{this.setState({content: e.target.value, error:''})}} className=\"textarea\" placeholder=\"الكود المصدري(العربي)\"></textarea><br />\n         <button onClick={this.onSubmit} className=\"primary\">ترجمة</button>\n         <button onClick={()=>{this.setState({content: '',error: '',tranzilation: ''});}} className=\"danger\">حذف</button><br />\n        <textarea value={this.state.tranzilation}  className=\"tranzilatearea\"></textarea>\n        </div>\n      </div>\n    );\n } \n}\nexport default App;\nrender(<App />, document.getElementById('root'));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}